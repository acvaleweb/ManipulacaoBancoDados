---
title: "Relatório - Desafio 10"
author: "Antonio Vale"
format: 
    html:
      self-contained: true
editor: visual
---

PARTE 1 - INTRODUÇÃO AO POLARS

```{r}
#GERANDO LOG DE DATA
#| echo: false
#| results: 'asis'
cat(paste0("Gerado em: ", format(Sys.time(), "%Y-%m-%d %H:%M:%S")))
```

```{r}

#criando nosso AMBIENTE VIRTUAL E INSTALANDO PACOTES PYTHON NECESSARIOS
library(reticulate)
virtualenv_create("myenv")

use_virtualenv("myenv")
py_install("polars", envname="myenv")
py_install("fastexcel", envname="myenv")
py_install("pyarrow", envname="myenv")
```

```{python}
# importando bibliotecas necessárias
import polars as pl
import fastexcel
import pyarrow

```

```{python}
# lendo dataset de aeroportos (colunas específicas)
aeroportos = pl.read_csv("../data/airports.csv",
                         columns = ["IATA_CODE", "CITY", "STATE"])
aeroportos.head(2)
```

```{python}
# lendo dataset de países a partir de planilha Excel
wdi = pl.read_excel("../data/WDIEXCEL.xlsx", sheet_name = "Country",
                    columns = ["Short Name", "Region"])
wdi.head(2)
```

```{python}
# criando um DataFrame de exemplo
df = pl.DataFrame({
    "grupo": ["A", "A", "B", "B", "C"],
    "valor1": [10, 15, 10, None, 25],
    "valor2": [5, None, 20, 30, None]
})
df
```

```{python}
# operações básicas com colunas
df["valor1"]
df["valor1"].mean()
df["valor1"].drop_nulls()
df["valor1"].drop_nulls().mean()
```

```{python}
# cálculo de médias usando select
df.select([
  pl.col("valor1").mean().alias("media_v1"),
  pl.col("valor2").mean()
])
```

```{python}
# agregações com group_by
df.group_by("grupo").agg([
  pl.col("valor1").mean().alias("media_valor1"),
  pl.col("valor2").min().alias("min_valor2")
]).sort("grupo")
```

```{python}
# leitura do dataset de voos
voos = pl.read_csv("../data/flights.csv",
                   columns = ["AIRLINE", "ARRIVAL_DELAY", "DESTINATION_AIRPORT"],
                   dtypes = {"AIRLINE": pl.Utf8,
                             "ARRIVAL_DELAY": pl.Int32,
                             "DESTINATION_AIRPORT": pl.Utf8})
voos.shape
```

```{python}
# primeiras linhas do dataset de voos
voos.head(3)
```

```{python}
# filtrando voos com colunas não nulas e apenas companhias/locais selecionados
resultado = (
  voos.drop_nulls(["AIRLINE", "DESTINATION_AIRPORT", "ARRIVAL_DELAY"])
  .filter(
    pl.col("AIRLINE").is_in(["AA", "DL"]) &
    pl.col("DESTINATION_AIRPORT").is_in(["SEA", "MIA", "BWI"])
    )
    .group_by(["AIRLINE", "DESTINATION_AIRPORT"])
    .agg([
      (pl.col("ARRIVAL_DELAY") > 30).mean().alias("atraso_medio")
      ])
)
```

```{python}
# ordenando resultado pelo atraso médio
resultado.sort("atraso_medio")
```

PARTE 2 - DADOS RELACIONAIS COM POLARS

```{python}
import polars as pl

# Criando DataFrames
clientes = pl.DataFrame({
    "cliente_id": [1, 2, 3, 4],
    "nome": ["Ana", "Bruno", "Clara", "Daniel"]
})

print(clientes)
```

```{python}
# criando tabela de pedidos
pedidos = pl.DataFrame({
    "pedido_id": [101, 102, 103, 104, 105],
    "cliente_id": [1, 2, 3, 1, 5],
    "valor": [100.50, 250.75, 75.00, 130.00, 79.00]
})

print(pedidos)
```

```{python}
# inner join entre clientes e pedidos
res_ij = clientes.join(pedidos, on="cliente_id", how="inner")
print(res_ij)
```

```{python}
# left join entre clientes e pedidos
res_lj = clientes.join(pedidos, on="cliente_id", how="left")
print(res_lj)
```

```{python}
# right join entre clientes e pedidos
res_rj = clientes.join(pedidos, on="cliente_id", how="right")
print(res_rj)
```

```{python}
# outer join entre clientes e pedidos
res_oj = clientes.join(pedidos, on="cliente_id", how="outer")
print(res_oj)
```

```{python}
# cross join (produto cartesiano)
res_cj = clientes.join(pedidos, how="cross")
print(res_cj)
```

```{python}
# reimprimindo tabelas originais
print(clientes)
print(pedidos)
```

```{python}
# agrupando resultado do inner join para calcular média dos valores
res = res_ij.group_by(["nome", "cliente_id"]).agg(pl.col("valor").mean())
print(res)
```

```{python}
# agregação a partir de outer join com filtro e soma
print(clientes)
print(pedidos)

res = (res_oj.with_columns(pl.col("valor") > 100)
       .group_by("nome")
       .agg(pl.col("valor").sum()))
print(res)
```

```{python}
# criando DataFrames adicionais para simulação de vendas
vendas = pl.DataFrame({
    "id_venda": [1, 2, 3],
    "id_cl": [1, 2, 1],
    "id_prod": [101, 102, 103],
    "qtde": [2, 1, 1]
})

detalhes_pedidos = pl.DataFrame({
    "id_ped": [201, 202, 203],
    "cl_id": [1, 2, 1],
    "id_prod": [101, 102, 104],
    "valor": [50.00, 75.00, 100.00]
})
```

```{python}
# mostrando as duas tabelas
print(vendas)
print(detalhes_pedidos)

```

```{python}
# join entre vendas e detalhes de pedidos
final = vendas.join(detalhes_pedidos,
                    left_on = ["id_cl", "id_prod"],
                    right_on = ["cl_id", "id_prod"],
                    how = "inner")
print(final)
```
