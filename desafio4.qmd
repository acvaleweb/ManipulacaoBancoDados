---
title: "Relatório - Desafio 4"
author: "Antonio Vale"
format: 
  html:
    self-contained: true
editor: visual
execute:
  warning: false    # hide warnings
  message: false    # hide messages
---

```{r}
library(tidyverse)
library(ggplot2)
```

```{r}
flights <- read_csv("flights.csv.zip")
airp <- read_csv("airports.csv")
```

```{r}

#criando funcao que recebe codigo da aeroname, e gera dataframe tidy com dados do voos de interesse e coordenadas dos aeroportos
tratar_df <- function(codigo) {
  #criando novo df "df" a partir de flights que seleciona colunas de interesse e as ordena de acordo com a data
  df <- dplyr::arrange(
    dplyr::select(
      dplyr::filter(flights, TAIL_NUMBER == codigo), #usando filter para selecionar apenas as linhas de interesse (referentes a aeronave escolhida)
      DEPARTURE_TIME, ARRIVAL_TIME, YEAR, MONTH, DAY, ORIGIN_AIRPORT, DESTINATION_AIRPORT, DISTANCE
    ),
    YEAR, MONTH, DAY, DEPARTURE_TIME
  )
  
  
  #extraindo coordenadas do dataframe airp (airports), de acordo com o código do aeroporto de origem e destino, e adicionando essas coordenadas ao dataframe df com a função join.
  df <- df %>%
    dplyr::left_join(airp, by = c("ORIGIN_AIRPORT" = "IATA_CODE")) %>%
    dplyr::rename(origin_lat = LATITUDE, origin_long = LONGITUDE) %>%
    dplyr::left_join(airp, by = c("DESTINATION_AIRPORT" = "IATA_CODE")) %>%
    dplyr::rename(dest_lat = LATITUDE, dest_long = LONGITUDE)
  
  

return(df)  #o retorno da função é o dataframe tratado
}
```

```{r}
df <- tratar_df("N431WN") #chamando nossa função e gerando dataframe para uma aeronave específica
```

Mapa completo do mundo:

```{r}
mundo <- ggplot2::map_data("world")  # usando a funcao map_data do pacote ggplot2 para plotar o gráfico de interesse. "world" tem a data geográfica de um mapa convencional.}

  ggplot() +
    geom_polygon(data = mundo, aes(x = long, y = lat, group = group),   # usando geom_polygon pra desenhar os territórios, com base na data geográfica armazenada em "mundo"
                 fill = "gray90", color = "white") +
    geom_segment(data = df, 
                 aes(x = origin_long, y = origin_lat,
                     xend = dest_long, yend = dest_lat), 
                 color = "blue", alpha = 0.05) + #gerando segmentos que ligam os pontos de origem e destino para cada linha do "df".
    geom_point(data = df,
               aes(x = origin_long, y = origin_lat),
               color = "green", size = 0.3) + #gerando pontos que representam os aeroportos de origem para cada voo
    geom_point(data = df,
               aes(x = dest_long, y = dest_lat),
               color = "red", size = 0.3) + #gerando pontos que representam os aeroportos de destino para cada voo
    coord_fixed(1.3) +
    theme(
    axis.text = element_blank(),   
    axis.ticks = element_blank(),  
    axis.title = element_blank()   #removendo eixo x, y e labels, pois não é de interesse saber a latitude e longitude exata
  )
```

Recorte da região de interesse (América do Norte):

```{r}
ggplot() +
  geom_polygon(data = mundo, aes(x = long, y = lat, group = group),
               fill = "gray90", color = "white") +
  geom_segment(data = df, aes(x = origin_long, y = origin_lat,
                              xend = dest_long, yend = dest_lat),
               color = "blue", alpha = 0.05) +
  geom_point(data = df, aes(x = origin_long, y = origin_lat),
             color = "green", size = 0.3) +
  geom_point(data = df, aes(x = dest_long, y = dest_lat),
             color = "red", size = 0.3) +
  coord_cartesian(xlim = c(-170, -50), ylim = c(5, 75)) +  # diferença deste plot para o outro - selecionando região de coordenadas de interesse. Como o dataset é de voos domésticos, todos voos estão nesta região.
  theme(
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    axis.title = element_blank()
  )
```

